import os, csv, sysimport xml.etree.ElementTree as ETimport benchmarknamefrom subprocess import run, Popenif len(sys.argv) == 1:    numtests = 3elif not sys.argv[1].isdigit():    numtests = 3else:     numtests = int(sys.argv[1])    cwd = os.getcwd()cinebench = cwd + '\\CinebenchR20\\'mark = 'C:\\Program Files\\UL\\3DMark\\'tat = 'C:\\Program Files\\Intel Corporation\\Intel(R)TAT6\\Host\\ThermalAnalysisToolCmd.exe'xperf = 'C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\xperf.exe'cpu = benchmarkname.get_cpu_nice_name()gpu = benchmarkname.get_gpu_nice_name()name = benchmarkname.get_system_model_name()if not os.path.exists(cwd + '\\results'):    os.mkdir(cwd + '\\results')results = cwd + '\\results\\'if not os.path.exists(results + cpu):    os.mkdir(results + cpu)results = results + cpu + '\\'if not os.path.exists(results + '1080p ' + gpu + ' ' + name):    os.mkdir(results + '1080p ' + gpu + ' ' + name)results = results + '1080p ' + gpu + ' ' + name + '\\'if not os.path.exists(results + '3DMark'):    os.mkdir(results + '3DMark')results3dm = results + '3DMark\\'if not os.path.exists(results + 'CinebenchR20'):    os.mkdir(results + 'CinebenchR20')resultscin = results + 'CinebenchR20\\'if not os.path.exists(results + 'ThermalAnalysisTool'):    os.mkdir(results + 'ThermalAnalysisTool')resultstat = results + 'ThermalAnalysisTool\\'if not os.path.exists(tat):    print("Installing Thermal Analysis Tool...")    path = cwd + '\\installers\\Intel(R)ThermalAnalysisToolInstallerWin.exe -s'    run(path)    print(" done.")else:    print("Thermal Analysis Tool already installed. Continuing...")    if not os.path.exists(xperf):    print("Installing Xperf... Note: This may require a system restart, which will happen automatically.")    path = cwd + '\\installers\\ADK\\adksetup.exe /q /features OptionId.WindowsPerformanceToolkit'    run(path)    print(" done.")    wait = input("\nPlease re-run this script to use Xperf. Closing...")    sys.exit()else:    print("Windows Performance Toolkit already installed. Continuing...")if not os.path.exists(mark + '3DMarkCmd.exe'):    path = cwd + '\\installers\\3dmark-setup.exe /quiet /force'     print("Installing 3dmark...")    run(path)    print(" done.")else:    print("3DMark already installed. Continuing...")    path = mark + '3DMarkCmd.exe --register=3DM-DEV-2JLJQ-2SJHH-WSU73-XVRXU'print(path)print("Registering 3dmark...")Popen(path)print(" done.")if not os.path.exists('C:\\ProgramData\\UL\\3DMark\\chops\\dlc\\fire-strike-test\\'):    path = mark + '3DMarkCmd.exe --install=\"' + cwd + '\\benchmarks\\3dmark-v2-9-0-fire-strike-test-v1-1-44.dlc\"'    print("Installing FireStrike...")    run(path)    print(" done.")else:    print("Fire Strike already installed. Continuing...")if not os.path.exists('C:\\ProgramData\\UL\\3DMark\\chops\\dlc\\time-spy-test\\'):    path = mark + '3DMarkCmd.exe --install=\"' + cwd + '\\benchmarks\\3dmark-v2-9-0-time-spy-test-v1-1-625.dlc\"'    print("Installing TimeSpy...")    run(path)    print(" done.")else:    print("Time Spy already installed. Continuing...")if not os.path.exists('C:\\ProgramData\\UL\\3DMark\\chops\\dlc\\sky-diver-test\\'):    path = mark + '3DMarkCmd.exe --install=\"' + cwd + '\\benchmarks\\3dmark-v2-9-0-sky-diver-test-v1-0-26.dlc\"'    print("Installing SkyDiver...")    run(path)    print(" done.")else:    print("Sky Diver already installed. Continuing...")    print("Starting Thermal Analysis Tool...")path = tat + ' -AL -AU=N -m=\"' + resultstat + 'tat.csv\"'xperfargs = '*Microsoft-Windows-Kernel-Processor-Power+*Microsoft-Windows-Shell-Core+*Microsoft-Windows-Kernel-Power+*Microsoft-Windows-DxgKrnl+*Microsoft-Windows-Win32k+*Microsoft-Windows-Dwm-Core+*Microsoft-Windows-DXGI+*Microsoft-Windows-Direct3D11+*SysConfig+0d663b46-c4bf-4c22-9cb5-2f2c79bacbbb+2013dbb2-2f76-4b2c-950a-0c9dfac62398+*Image+2f900642-1a32-408f-b286-e6a07a1750a5+*Process+*Thread+*PageFault+*DiskIo+41916587-debb-4c34-b7fa-909301f128cd+41dbcb73-5a7f-476b-b844-61a49d724e3a+4eab923a-d424-4f25-9e2c-f5bc49985b78+5602aa38-c16d-461f-86b0-d78d7cd80a24+63327924-0dcc-418c-a5f0-5faf329f14ab+*EventTrace+70930759-eda2-4551-a254-41c7cfc9e4b3+7768062c-700d-4479-8ddd-7e7f60ccb4b4+810143b0-8898-433d-b00d-fba5d05edf6d+8ebf1282-0500-45c6-a8af-3eee75678a96+*FileIo+*SysConfigEx+ae78763d-362e-49dc-8d07-af87b3573d89+b3369e69-074d-4e14-a7bd-845bc1b47ee9+*ImageId+*EventMetadata+*Perfinfo+*Power+*WinSATAssessment'Popen(path)
print(path)

import time
time.sleep(15)print("Running 3DMark benchmarks...")#3DMark Fire Strike, Time Spy, and Sky Diverfor x in range(1, (numtests + 1)):    os.system('xperf -start Baseline -on ' + xperfargs)    path = mark + '3DMarkCmd.exe --definition=firestrike.3dmdef --out=\"' + results3dm + 'FireStrike0' + str(x) + '.3dmark-result\" --export=\"' + results3dm + 'FireStrike0' + str(x) + '.xml\" --audio=off --online=off'    run(path)    os.system('xperf -stop Baseline -d \"' + results + 'FireStrike0' + str(x) + '.etl\"')        os.system('xperf -start Baseline -on ' + xperfargs)    path = mark + '3DMarkCmd.exe --definition=skydiver.3dmdef --out=\"' + results3dm + 'SkyDiver0' + str(x) + '.3dmark-result\" --export=\"' + results3dm + 'SkyDiver0' + str(x) + '.xml\" --audio=off --online=off'    run(path)    os.system('xperf -stop Baseline -d \"' + results + 'SkyDiver0' + str(x) + '.etl\"')        os.system('xperf -start Baseline -on ' + xperfargs)    path = mark + '3DMarkCmd.exe --definition=timespy.3dmdef --out=\"' + results3dm + 'TimeSpy0' + str(x) + '.3dmark-result\" --export=\"' + results3dm + 'TimeSpy0' + str(x) + '.xml\" --audio=off --online=off'    run(path)    os.system('xperf -stop Baseline -d \"' + results + 'TimeSpy0' + str(x) + '.etl\"')print("Running Cinebench benchmarks...")for x in range(1, (numtests + 1)):    os.system('xperf -start Baseline -on ' + xperfargs)    path = cinebench + 'Cinebench.exe g_acceptDisclaimer=true g_CinebenchCPUXTest=true'    f = open(resultscin + ('CineBenchR20MC-0' + str(x) + '.log'), 'w+')    run(path, stdout=f)    os.system('xperf -stop Baseline -d \"' + results + 'CineBenchMC0' + str(x) + '.etl\"')            os.system('xperf -start Baseline -on ' + xperfargs)    path = cinebench + 'Cinebench.exe g_acceptDisclaimer=true g_CinebenchCPU1Test=true'    f = open(resultscin + ('CineBenchR20SC-0' + str(x) + '.log'), 'w+')    run(path, stdout=f)    os.system('xperf -stop Baseline -d \"' + results + 'CineBenchSC0' + str(x) + '.etl\"')    print("Stopping Thermal Analysis Tool...")path = tat + ' -stop'Popen(path)    MCresults = []SCresults = []FSresults = []TSresults = []SDresults = []#Open logs for csvfor x in range(1, (numtests + 1)):    path = resultscin + 'CineBenchR20MC-0' + str(x) + '.log'    file = open(path)    for s in file:        if 'Values' in s:            r = str.split(s)            MCresults.append(r[1].strip('{}'))    file.close()        path = resultscin + 'CineBenchR20SC-0' + str(x) + '.log'    file = open(path)    for s in file:        if "Values" in s:            r = str.split(s)            SCresults.append(r[1].strip('{}'))    file.close()        path = results3dm + 'FireStrike0' + str(x) + '.xml'    tree = ET.parse(path)    root = tree.getroot()    for result in root.iter('firestrikecombinedscorep'):        FSresults.append(result.text)    for result in root.iter('firestrikegraphicsscorep'):        FSresults.append(result.text)    for result in root.iter('firestrikephysicsscorep'):        FSresults.append(result.text)    for result in root.iter('firestrikeoverallscorep'):        FSresults.append(result.text)                    path = results3dm + 'SkyDiver0' + str(x) + '.xml'        tree = ET.parse(path)    root = tree.getroot()    for result in root.iter('SkyDiverPerformanceCombinedScore'):        SDresults.append(result.text)    for result in root.iter('SkyDiverPerformanceGraphicsScore'):        SDresults.append(result.text)    for result in root.iter('SkyDiverPerformancePhysicsScore'):        SDresults.append(result.text)    for result in root.iter('SkyDiverPerformance3DMarkScore'):        SDresults.append(result.text)                path = results3dm + 'TimeSpy0' + str(x) + '.xml'    tree = ET.parse(path)    root = tree.getroot()    for result in root.iter('TimeSpyPerformanceCPUScore'):        TSresults.append(result.text)    for result in root.iter('TimeSpyPerformanceGraphicsScore'):        TSresults.append(result.text)    for result in root.iter('TimeSpyPerformance3DMarkScore'):        TSresults.append(result.text)   #Write to csv   with open(results + '\\baseline.csv', 'w+') as csvfile:    writer = csv.writer(csvfile, delimiter=',', lineterminator='\n')    writer.writerow(['run','CB20MultiCore','CB20SingleCore','FirestrikeCombined','FirestrikeGraphics','FirestrikePhysics','FirestrikeScore','SkyDiverCombined','SkyDiverGraphics','SkyDiverPhysics','SkyDiverScore','TimeSpyCPU','TimeSpyGraphics','TimeSpyScore'])        for x in range(0, numtests):        wr = []        wr.append(str(x+1))                #Cinebench results        wr.append(MCresults[x])        wr.append(SCresults[x])                #Fire Strike results        wr.append(FSresults[(x * 4)])        wr.append(FSresults[(x * 4) + 1])        wr.append(FSresults[(x * 4) + 2])        wr.append(FSresults[(x * 4) + 3])                #Sky Diver results        wr.append(SDresults[(x * 4)])        wr.append(SDresults[(x * 4) + 1])        wr.append(SDresults[(x * 4) + 2])        wr.append(SDresults[(x * 4) + 3])                #Time Spy results        wr.append(TSresults[(x * 3)])        wr.append(TSresults[(x * 3) + 1])        wr.append(TSresults[(x * 3) + 2])                        writer.writerow(wr)os.system('dxdiag /t ' + results + 'SystemReport.txt')